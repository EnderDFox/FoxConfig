{
	"this": {
		"prefix": "tt",
		"body": [
			"this."
		],
		"description": ""
	},
	"log.log": {
		"prefix": "log.log",
		"body": [
			"console.log(\"[log]\",$0)"
		],
		"description": "console log"
	},
	"log.debug": {
		"prefix": "log.debug",
		"body": [
			"console.log(\"[debug]\",$0)"
		],
		"description": "console Debug"
	},
	"log.info": {
		"prefix": "log.info",
		"body": [
			"console.log(\"[info]\",$0)"
		],
		"description": "console Info"
	},
	"log.warn": {
		"prefix": "log.warn",
		"body": [
			"console.log(\"[warn]\",$0)"
		],
		"description": "console Warn"
	},
	"log.error": {
		"prefix": "log.error",
		"body": [
			"console.log(\"[error]\",$0)"
		],
		"description": "console Error"
	},
	"log.fatal": {
		"prefix": "log.fatal",
		"body": [
			"console.log(\"[fatal]\",$0)"
		],
		"description": "console Fatal"
	},
	"number": {
		"prefix": "num",
		"body": [
			"number"
		],
		"description": "number"
	},
	"int": {
		"prefix": "int",
		"body": [
			"number"
		],
		"description": ""
	},
	"implements": {
		"prefix": "imp",
		"body": [
			"implements"
		],
		"description": ""
	},
	"extends": {
		"prefix": "ext",
		"body": [
			"extends"
		],
		"description": ""
	},
	"array function":{
		"prefix": "af",
		"body": [
			"(${1})=>{",
			"}${0}"
		],
		"description": "callback"
	},
	"callback": {
		"prefix": "cb",
		"body": [
			"callback"
		],
		"description": "callback"
	},
	"fairygui": {
		"prefix": "fg_",
		"body": [
			"fairygui"
		],
		"description": "fairygui"
	},
	"GComponent": {
		"prefix": "fgGComp",
		"body": [
			"fairygui.GComponent"
		],
		"description": "GComponent"
	},
	"egret": {
		"prefix": "eg",
		"body": [
			"egret"
		],
		"description": ""
	},
	"ee": {
		"prefix": "ee",
		"body": [
			"egret.Event"
		],
		"description": ""
	},
	"ete": {
		"prefix": "ete",
		"body": [
			"egret.TouchEvent"
		],
		"description": ""
	},
	"fori": {
		"prefix": "fori",
		"body": [
			"var len = ${1:arr}.length",
			"for (var ${2:i} = 0; ${2:i} < len; ${2:i}++) {",
			"\tvar ${3:item} = ${1:arr}[${2:i}]",
			"\t${3:item}${0}",
			"}"
		],
		"description": "fori"
	},
	"forr": {
		"prefix": "forr",
		"body": [
			"for (var ${2:i} = ${1:arr}.length-1; ${2:i} >=0; ${2:i}--) {",
			"\tvar ${3:item} =  ${1:arr}[${2:i}]",
			"\t${3:item}${0}",
			"}"
		],
		"description": ""
	},
	"forij": {
		"prefix": "forij",
		"body": [
			"for (var ${2:i} = 0; ${2:i} < ${1:arr}.length; ${2:i}++) {",
			"\tfor (var ${3:j} = 0; ${3:j} < ${1:arr}[i].length; ${3:j}++) {",
			"\t\tvar ${4:item} = ${1:arr}[${2:i}][${3:j}]",
			"\t\t${4:item}${0}",
			"\t}",
			"}"
		],
		"description": "forij"
	},
	"forin": {
		"prefix": "forin",
		"body": [
			"for (var ${2:i} in ${1:arr}) {",
			"\tvar ${3:item} = ${1:arr}[${2:i}]",
			"\t${3:item}${0}",
			"}"
		],
		"description": "forin"
	},
	"publicstatic": {
		"prefix": "ps",
		"body": [
			"public static $0"
		],
		"description": "public static "
	},
	"constructorowner": {
		"prefix": "co",
		"body": [
			"public owner:${1}",
			"constructor(owner:${1}){",
			"\tthis.owner = owner",
			"}"
		],
		"description": "constructor(owner:"
	},
	"require": {
		"prefix": "req0",
		"body": [
			"require(\"${1}\");\r",
			"${0}"
		],
		"description": ""
	},
	"single instance": {
		"prefix": "singleInstance",
		"body": [
			"private static _si: ${1}",
			"public static get si(): ${1} {",
			"\tif (!${1}._si) ${1}._si = new ${1}()",
			"\treturn ${1}._si",
			"}"
		],
		"description": ""
	},
	"single instance1": {
		"prefix": "singleInstance1",
		"body": [
			"public static si: ${1} = new ${1}()"
		],
		"description": ""
	},
	"ValueOfVars": {
		"prefix": "vov",
		"body": [
			"${1},\"=`${1}`\"${0}"
		],
		"description": ""
	},
	"map": {
		"prefix": "map",
		"body": [
			"{[key:${1:number|string}]:${0}} = {}"
		],
		"description": ""
	},
	"public method": {
		"prefix": "pm",
		"body": [
			"public ${2:methodName}(${3:args}):${1:void}{",
			"\t${0}",
			"}"
		],
		"description": ""
	},
	"private method": {
		"prefix": "prim",
		"body": [
			"private ${2:methodName}(${3:args}):${1:void}{",
			"\t${0}",
			"}"
		],
		"description": ""
	},
	"public var": {
		"prefix": "pv",
		"body": [
			"public ${2:varName}:${1:string}${0}"
		],
		"description": ""
	},
	"private var": {
		"prefix": "priv",
		"body": [
			"private ${2:varName}:${1:string}${0}"
		],
		"description": ""
	},
	"public static method": {
		"prefix": "psm",
		"body": [
			"public static ${2:methodName}(${3:args}):${1:void}{",
			"\t${0}",
			"}"
		],
		"description": ""
	},
	"return null": {
		"prefix": "rn",
		"body": [
			"return ${1:null}",
			"${0}"
		],
		"description": ""
	},
	"return false": {
		"prefix": "rf",
		"body": [
			"return ${1:false}",
			"${0}"
		],
		"description": ""
	},
	"return true": {
		"prefix": "rt",
		"body": [
			"return ${1:true}",
			"${0}"
		],
		"description": ""
	},
	"method force end": {
		"prefix": "mfe",
		"body": [
			"bool tempVar=false;if(tempVar==false) return"
		],
		"description": ""
	},
	"dispose": {
		"prefix": "disp",
		"body": [
			"public dispose(){",
			"\t${0}",
			"\tsuper.dispose()",
			"}"
		],
		"description": ""
	},
	"implements IDispose": {
		"prefix": "iidisp",
		"body": [
			"implements IDispose"
		],
		"description": ""
	},
	"model.fights.*": {
		"prefix": "mf",
		"body": [
			"models.fights${0}"
		],
		"description": ""
	},
	"dic": {
		"prefix": "dic",
		"body": [
			"{ [key: ${1:number|string}]: ${2} } = {};${0}"
		],
		"description": ""
	},
	"ARPGFacade": {
		"prefix": "afs",
		"body": [
			"ARPGFacade.si"
		],
		"description": ""
	},
	"entitas group add": {
		"prefix": "ga",
		"body": [
			"(g: Group, e: Entity, cid: number, c: IComponent) => {${0}}"
		],
		"description": ""
	},
	"entitas group update": {
		"prefix": "gu",
		"body": [
			"(g: Group, e: Entity, cid: number, prevC: IComponent, newC: IComponent) => {${0}}"
		],
		"description": ""
	},
	"T_System":{
		"prefix": "t_system",
		"body": [
			"class ${1}System implements ISetPool, IInitializeSystem, IExecuteSystem {",
			"\tprotected pool: entitas.Pool",
			"\tprotected group: entitas.Group",
			"\tpublic setPool(pool: entitas.Pool) {",
			"\t\tthis.pool = pool",
			"\t\tthis.group = pool.getGroup(entitas.Matcher.allOf(entitas.Matcher.${2}))",
			"\t}",
			"\tpublic initialize() {",
			"\t}",
			"\tpublic execute() {",
			"\t\tvar entities = this.group.getEntities()",
			"\t\tfor (var i = 0, l = entities.length; i < l; i++) {",
			"\t\t\tvar e = entities[i]",
			"\t\t\t\t//TODO:",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": ""
	},
}